using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Diagnostics;
using System.Threading;

/* Copyright 2016.
 * Feel free to use any portion of this code so long as proper attributive credit is provided.
 * In other words, don't pass my work off as your own. */

/* The main purpose of this application is to implement and compare iterative and recursive approaches.
 * The Fibonacci Sequence is used as it provides excellent illustration of the differences.
 * The algorithms were originally formulated in Java.
 * Ported to C# so that deeper elements could be generated using the 128-bit decimal data type. */

namespace Fibonacci
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        // variable declaration outsite methods;
        // allows method manipulation to persist.
        int first; // radio button selection.
        Stopwatch timeOp = new Stopwatch(); // runtime length of operation.

        // method to set value of first;
        // based on radio button selection in UI.
        private void SetFirst()
        {
            if (zeroRadioButton.Checked == true)
            {
                first = 0;
            }
            else
            {
                first = 1;
            }
        }

        // method retrieves user input for nth element;
        // incluse of null, invalid & negative input-checking.
        private int GetInput()
        {
            int input;
            // check for null or invalid input.
            if (int.TryParse(inputTextBox.Text, out input) == false)
            {
                input = 5;
                outputListBox.Items.Add("INVALID INPUT.");
                outputListBox.Items.Add("The program requires a positive integer value for the last element.");
                outputListBox.Items.Add("Generating to the fifth element by default.");
                outputListBox.Items.Add("");
            }
            // check for negative input.
            else if ((int.TryParse(inputTextBox.Text, out input) == true) && (input < 0))
            {
                input = Math.Abs(input);
                outputListBox.Items.Add("INVALID INPUT.");
                outputListBox.Items.Add("The program requires a positive integer value for the last element.");
                outputListBox.Items.Add("Generating to the absolute value of the integer provided.");
                outputListBox.Items.Add("");
            }
            return input;
        }

        // recursive method for generating elements.
        private decimal GiveRecurse(int nth)
        {
            // base case: zero, one.
            if (nth == 0 || nth == 1)
            {
                return nth;
            }
            else
            {
                try
                {
                    decimal recurseToGive = GiveRecurse(nth - 1) + GiveRecurse(nth - 2);
                    return recurseToGive;
                }
                // overflow catch.
                // returns value (-1) which is not otherwise generated,
                // which is then checked by the calling method (RecurseZero() or RecurseOne()).
                catch
                {
                    return -1;
                }
            }
        }

        // recursive array method for generating elements.
        private decimal[] PopulateRecurseArray(int nth)
        {
            decimal[] recursiveArray = new decimal[nth];
            int i = (int)first;
            recursiveArray[0] = 0;
            while (i < nth)
            {
                recursiveArray[i] = GiveRecurse(i);
                i++;
            }
            return recursiveArray;
        }

        // iterative method for generating elements.
        private decimal GiveIterate(int nth)
        {
            // base case: zero, one.
            if ((nth == 0) || (nth == 1))
            {
                return nth;
            }
            else
            {
                try
                {
                    decimal first = 0;
                    decimal second = 1;
                    decimal fibonacci = 0;
                    int count = 2;
                    while (count <= nth)
                    {
                        fibonacci = first + second;
                        first = second;
                        second = fibonacci;
                        count++;
                    }
                    return second;
                }
                // catches overflow and returns value (-1) which is not otherwise generated,
                // which is then checked by the calling method (IterateZero() or IterateOne()).
                catch
                {
                    return -1;
                }
            }
        }

        private void Recurse(int input)
        {
            timeOp.Start();
            int i = first;
            while (i <= input)
            {
                // -1 is only passed in event of overflow.
                if (GiveRecurse(i) == -1)
                {
                    outputListBox.Items.Add("Overflow error at element " + (i) + ". The element's value is too large to calculate.   Elapsed time: " + ((decimal)timeOp.ElapsedMilliseconds / 1000) + " seconds.");
                    outputListBox.TopIndex = outputListBox.Items.Count - 1;
                    break;
                }
                else
                {
                    outputListBox.Items.Add("Sequence element " + (i) + " is " + GiveRecurse(i) + ".   Elapsed time: " + ((decimal)timeOp.ElapsedMilliseconds / 1000) + " seconds.");
                    outputListBox.TopIndex = outputListBox.Items.Count - 1;
                }
                i++;
            }
            timeOp.Reset();
        }

        private void RecurseArray(int input)
        {
            timeOp.Start();
            decimal[] recurseArray =  PopulateRecurseArray(input+1);
            int i = first;
            while (i <= input)
            {
                if (recurseArray[i] == -1)
                {
                    outputListBox.Items.Add("Overflow error at element " + (i) + ". The element's value is too large to calculate.   Elapsed time: " + ((decimal)timeOp.ElapsedMilliseconds / 1000) + " seconds.");
                    outputListBox.TopIndex = outputListBox.Items.Count - 1;
                }
                else
                {
                    outputListBox.Items.Add("Sequence element " + (i) + " is " + recurseArray[i] + ".   Elapsed time: " + ((decimal)timeOp.ElapsedMilliseconds / 1000) + " seconds.");
                    outputListBox.TopIndex = outputListBox.Items.Count - 1;
                }
                i++;
            }
            timeOp.Reset();
        }

        private void Iterate(int input)
        {
            timeOp.Start();
            int i = first;
            while (i <= input)
            {
                // -1 is only passed in event of overflow.
                if (GiveIterate(i) == -1)
                {
                    outputListBox.Items.Add("Overflow error at element " + (i) + ". The element's value is too large to calculate.   Elapsed time: " + ((decimal)timeOp.ElapsedMilliseconds / 1000) + " seconds.");
                    outputListBox.TopIndex = outputListBox.Items.Count - 1;
                    break;
                }
                else
                {
                    outputListBox.Items.Add("Sequence element " + (i) + " is " + GiveIterate(i) + ".   Elapsed time: " + ((decimal)timeOp.ElapsedMilliseconds / 1000) + " seconds.");
                    outputListBox.TopIndex = outputListBox.Items.Count - 1;
                }
                i++;
            }
            timeOp.Reset();
        }

        private void ClearOutput()
        {
            inputTextBox.Text = "";
            outputListBox.Items.Clear();
        }

        private void CheckWarn(int input)
        {

        }

        private void iterateButton_Click(object sender, EventArgs e)
        {
            SetFirst();
            int input = GetInput();
            outputListBox.Items.Add("Iterating...");
            Iterate(input);
            outputListBox.Items.Add("Done.");
            outputListBox.TopIndex = outputListBox.Items.Count - 1;
        }

        private void recurseButton_Click(object sender, EventArgs e)
        {
            SetFirst();
            int input = GetInput();
            // give warning if attempting to recurse to a large nth value.
            if (input > 30)
            {
                DialogResult dR = MessageBox.Show("You have specified that you wish to generate to an element greater than the 30th using the recursive method. The recursive method is inefficient for large numbers and will likely take longer than expected. This could also monopolize computer resources. If you are sure, click 'OK' to continue.", "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);
                if (dR == DialogResult.OK)
                {
                    outputListBox.Items.Add("Recursing...");
                    Recurse(input);
                }
                else
                {
                    return;
                }
            }
            else
            {
                outputListBox.Items.Add("Recursing...");
                Recurse(input);
            }
            outputListBox.Items.Add("Done.");
            outputListBox.TopIndex = outputListBox.Items.Count - 1;
        }

        private void arrayButton_Click(object sender, EventArgs e)
        {
            SetFirst();
            int input = GetInput();
            // give warning if attempting to recurse to a large nth value.
            if (input > 30)
            {
                DialogResult dR = MessageBox.Show("You have specified that you wish to generate to an element greater than the 30th using the recursive method. The recursive method is inefficient for large numbers and will likely take longer than expected. This could also monopolize computer resources. If you are sure, click 'OK' to continue.", "Warning", MessageBoxButtons.OKCancel, MessageBoxIcon.Exclamation);
                if (dR == DialogResult.OK)
                {
                    outputListBox.Items.Add("Recursing...");
                    RecurseArray(input);
                }
                else
                {
                    return;
                }
            }
            else
            {
                outputListBox.Items.Add("Recursing...");
                RecurseArray(input);
            }
            outputListBox.Items.Add("Done.");
            outputListBox.TopIndex = outputListBox.Items.Count - 1;
        }

        private void clearButton_Click(object sender, EventArgs e)
        {
            ClearOutput();
        }

        private void exitButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
